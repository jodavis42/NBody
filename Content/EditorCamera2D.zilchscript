////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2017 DigiPen USA Corporation, All Rights Reserved
// Author: Joshua Davis
// Last updated by: Joshua Davis
// Last update: 8/11/2017
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// A 2D camera for easy movement around a large scene. The camera uses an exponential zooming to
// easily zoom in/out at an area about the mouse position. Middle click can be used to pan the
// camera based. Additionally, camera movement is done in screen space so it's easy to move about
// a large scene regardless of how zoomed in/out the camera is.
class EditorCamera2D : ZilchComponent
{
  [Dependency] var Transform : Transform;
  [Dependency] var Camera : Camera;
  [Dependency] var MouseCapture : MouseCapture;
  
  // What should the speed of the camera be based upon a percentage of the screen size.
  // When the value is 1, the camera will move one screen's distance per second.
  [Property] var ScreenMovementSpeedPerSecond : Real = 0.5;
  // The exponential used to control camera zoom speed. This makes zooming
  // quick for large distances but slow for small distances.
  [Property] var ZoomExponent : Real = 1.5;
  
  // The base size of the camera used to compute a quadratic zoom
  var BaseSize : Real;
  
  function Initialize(init : CogInitializer)
  {
    // Listen to logic update for wasd/arrow-key movement
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    // Listen to mouse scroll for camera zooming
    Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
    // Listen for middle/right mouse down for camera panning
    Zero.Connect(this.Space, Events.MiddleMouseDown, this.OnCaptureMouse);
    //Zero.Connect(this.Space, Events.RightMouseDown, this.OnCaptureMouse);
    Zero.Connect(this.Owner, Events.MouseDragMove, this.OnMouseDragMove);
    
    // Compute our initial base size from the current camera's size
    this.BaseSize = Math.Pow(this.Camera.Size, 1 / this.ZoomExponent);
  }
  
  function ScreenDeltaToWorldDelta(screenDelta : Real2, cameraViewport : CameraViewport) : Real3
  {
    var worldMovement = cameraViewport.ScreenToWorldZPlane(screenDelta, 0) - cameraViewport.ScreenToWorldZPlane(Real2.Zero, 0.0);
    return worldMovement;
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    // Compute movement in the x-y plane
    var movement = Real2();
    if(Zero.Keyboard.KeyIsDown(Keys.W) || Zero.Keyboard.KeyIsDown(Keys.Up))
      movement.Y = this.ScreenMovementSpeedPerSecond;
    else if(Zero.Keyboard.KeyIsDown(Keys.S) || Zero.Keyboard.KeyIsDown(Keys.Down))
      movement.Y = -this.ScreenMovementSpeedPerSecond;
    if(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.Left))
      movement.X = -this.ScreenMovementSpeedPerSecond;
    else if(Zero.Keyboard.KeyIsDown(Keys.D) || Zero.Keyboard.KeyIsDown(Keys.Right))
      movement.X = this.ScreenMovementSpeedPerSecond;
      
    // Assume that our movement vector was in screen-space and transform it back into world-space.
    // This allows us to have a fixed screen-space movement speed regardless of the camera's zoom level
    var cameraViewport = this.Camera.CameraViewportCog.CameraViewport;
    var screenMovement = movement * cameraViewport.ViewportResolution * event.Dt;
    var worldDelta = this.ScreenDeltaToWorldDelta(screenMovement, cameraViewport);
    // Since we came from screen-space, we have to flip the y-axis (+y is down in screen-space)
    worldDelta.Y *= -1;
    this.Transform.WorldTranslation += worldDelta;
  }
  
  function OnMouseScroll(event : ViewportMouseEvent)
  {
    // Grab the position of the mouse on the zero z-plane before scrolling
    var cameraViewport = event.CameraViewport;
    var screenPos = event.Position;
    var zPos = cameraViewport.ScreenToWorldZPlane(screenPos, 0);
    
    // Update the base camera size based upon the scroll and then apply
    // an exponent to it to make a non-linear zoom speed.
    this.BaseSize += -event.Scroll.Y;
    this.Camera.Size = Math.Pow(this.BaseSize, this.ZoomExponent);
    
    // Re-calculate the new zero zplane position after scrolling
    var newZPos = cameraViewport.ScreenToWorldZPlane(screenPos, 0);
    // Move the camera so that the mouse is at the same world xy value
    this.Transform.WorldTranslation += (zPos - newZPos);
  }
  
  function OnCaptureMouse(event : ViewportMouseEvent)
  {
    // Capture the mouse. This will keep giving us MouseDrag events until the mouse is released.
    this.MouseCapture.Capture(event);
  }

  function OnMouseDragMove(event : ViewportMouseEvent)
  {
    // Transform the movement from screen-space into world space. This will make the camera pan to
    // keep the mouse at the same world position on the zero z-plane.
    var movement = -event.Movement;
    var worldMovement = this.ScreenDeltaToWorldDelta(movement, event.CameraViewport);
    this.Transform.WorldTranslation += worldMovement;
  }
}
